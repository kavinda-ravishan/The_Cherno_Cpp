#include <iostream>
#include <map>
#include <string>
#include <tuple>

void example_1()
{
    std::map<std::string, std::string> m;

    m.insert(std::pair<std::string, std::string>("A", "1"));
    m.insert(std::pair<std::string, std::string>("B", "2"));
    m.insert(std::pair<std::string, std::string>("C", "3"));
    m.insert(std::pair<std::string, std::string>("D", "4"));

    for(auto [key, value] : m)
    {
        std::cout<<key<<" : "<<value<<std::endl;
    }
}

std::tuple<std::string, int, float> createPerson()
{
    return {"Kavinda", 27, 1.23};
}

int main()
{
    std::tuple<std::string, int, float> person = createPerson();

    std::string& a_name = std::get<0>(person);
    int a_age = std::get<1>(person);
    float a_height = std::get<2>(person);
    std::cout<<a_name<<", "<<a_age<<", "<<a_height<<std::endl;

    std::string b_name;
    int b_age;
    float b_height;
    std::tie(b_name, b_age, b_height) = createPerson();
    std::cout<<b_name<<", "<<b_age<<", "<<b_height<<std::endl;

    auto [name, age, height] = createPerson();
    std::cout<<name<<", "<<age<<", "<<height<<std::endl;

    return 0;
}

/*
tasks.json
{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: cl.exe build active file",
            "command": "cl.exe",
            "args": [
                "/Zi",
                "/EHsc",
                "/nologo",
                "/Fe${fileDirname}\\${fileBasenameNoExtension}.exe",
                "/std:c++17",
                "${file}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$msCompile"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
}
*/